{"version":3,"sources":["views/Header/Header.tsx","views/NavTab/NavTab.tsx","views/Container/Components/Decryption.tsx","views/Container/Components/Encryption.tsx","views/Container/Components/Hash.tsx","views/Container/Components/Encode.tsx","views/Container/Components/Decode.tsx","views/Container/Container.tsx","views/App.tsx","misc/serviceWorker.ts","index.tsx","images/logo.png"],"names":["Header","props","handleMessageUpdate","setState","ps","messageIndex","messages","length","state","this","currentMsg","className","replace","to","src","logo","alt","key","avgTypingDelay","textDelay","onTypingDone","Delay","ms","Backspace","count","React","NavTab","activeClassName","Decryption","Encryption","encrpytions","handleSubmit","e","preventDefault","encryptedText","encrypt","secretKey","getRandomHex","crypto","algorithm","text","byteLength","toString","cipher","crypted","update","final","htmlFor","id","value","onChange","target","disabled","map","algo","style","width","type","onClick","placeholder","isSubmitDisabled","Hash","supportedAlgos","hashes","handleSearch","hashedMap","forEach","h","getHashedValue","searchTerm","digest","filter","includes","toLowerCase","undefined","Object","keys","i","scope","Encode","Decode","Container","path","component","render","App","href","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.eec66818.chunk.js","sourcesContent":["// Lib\nimport * as React from 'react';\nimport Typist from 'react-typist';\nimport 'styles/Typist.scss';\nimport { Link } from 'react-router-dom';\n\n// App\nimport logo from 'images/logo.png';\nimport 'styles/Header.scss';\n\ninterface HeaderProps {\n  readonly textDelay: number;\n}\n\ninterface HeaderStates {\n  messageIndex: number;\n  messages: string[];\n}\n\nexport class Header extends React.PureComponent<HeaderProps, HeaderStates> {\n  constructor(props: HeaderProps) {\n    super(props);\n\n    this.state = {\n      messageIndex: 0,\n      messages: [\n        'Welcome to CryptoKoon!',\n        'Try using a Hash!',\n        'Or how about an Encryption?',\n        'Check out my GitHub!',\n        '...',\n        'Have fun :)',\n      ],\n    };\n  }\n\n  public handleMessageUpdate = () => {\n    this.setState(ps => ({\n      messageIndex: (ps.messageIndex + 1) % ps.messages.length,\n    }));\n  };\n\n  render() {\n    const { messageIndex, messages } = this.state;\n    const currentMsg = messages[messageIndex];\n\n    return (\n      <div className=\"header\">\n        <Link replace to=\"/\">\n          <img src={logo} alt=\"cryptokoon-logo\" className=\"logo\" />\n        </Link>\n        <Typist\n          key={messageIndex}\n          avgTypingDelay={this.props.textDelay}\n          className=\"text-center\"\n          onTypingDone={this.handleMessageUpdate}\n        >\n          <span className=\"text\">{currentMsg}</span>\n          <Typist.Delay ms={1600} />\n          <Typist.Backspace count={currentMsg.length} />\n          <Typist.Delay ms={800} />\n        </Typist>\n      </div>\n    );\n  }\n}\n","// Lib\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// App\nimport 'styles/NavTab.scss';\n\nexport class NavTab extends React.PureComponent {\n  render() {\n    return (\n      <ul className=\"nav nav-tabs\">\n        <li className=\"nav-item\">\n          <NavLink replace className=\"nav-link\" to=\"/hash\" activeClassName=\"active\">\n            Hash\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink replace className=\"nav-link\" to=\"/encryption\" activeClassName=\"active\">\n            Encryption\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink replace className=\"nav-link\" to=\"/decryption\" activeClassName=\"active\">\n            Decryption\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink replace className=\"nav-link\" to=\"/encode\" activeClassName=\"active\">\n            Encode\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink replace className=\"nav-link\" to=\"/decode\" activeClassName=\"active\">\n            Decode\n          </NavLink>\n        </li>\n      </ul>\n    );\n  }\n}\n","// Lib\nimport * as React from 'react';\n\nexport class Decryption extends React.PureComponent {\n  render() {\n    return <h1>I am Decryption</h1>;\n  }\n}\n","// Lib\nimport * as React from 'react';\nimport * as crypto from 'crypto';\n\n// App\nimport 'styles/Encryption.scss';\n\ninterface EncryptionState {\n  algorithm?: string;\n  secretKey: string;\n  text?: string;\n  encryptedText?: string;\n}\n\n// eslint-disable-next-line\ninterface EncryptionProps {}\n\nexport class Encryption extends React.PureComponent<EncryptionProps, EncryptionState> {\n  private encrpytions: string[];\n\n  constructor(props: EncryptionProps) {\n    super(props);\n    this.state = {\n      secretKey: this.getRandomHex(32),\n    };\n    this.encrpytions = crypto.getCiphers();\n  }\n\n  private isSubmitDisabled(): boolean {\n    const { algorithm, secretKey, text } = this.state;\n\n    return !algorithm || !secretKey || !text;\n  }\n\n  private getRandomHex(byteLength: number): string {\n    return crypto.randomBytes(byteLength).toString('hex');\n  }\n\n  private handleSubmit = (e: any): void => {\n    e && e.preventDefault();\n\n    this.setState({ encryptedText: this.encrypt() });\n  };\n\n  public encrypt(): string {\n    // https://lollyrock.com/posts/nodejs-encryption/\n    const { algorithm, secretKey, text } = this.state;\n    const cipher = crypto.createCipher(algorithm!, secretKey);\n    let crypted = cipher.update(text!, 'utf8', 'hex');\n    crypted += cipher.final('hex');\n\n    return crypted;\n  }\n\n  render() {\n    return (\n      <div className=\"encryption-container\">\n        <form className=\"form\">\n          <div className=\"form-group mt-3\">\n            <label className=\"ml-1\" htmlFor=\"algorithmDropDown\">\n              Algorithms\n            </label>\n            <select\n              className=\"form-control\"\n              id=\"algorithmDropDown\"\n              value={this.state.algorithm || 'default'}\n              onChange={e => this.setState({ algorithm: e.target.value })}\n            >\n              <option disabled value=\"default\">\n                Choose an Encryption Algorithm...\n              </option>\n              {this.encrpytions.map((algo: string) => (\n                <option key={algo} value={algo}>\n                  {algo}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"input-group mb-2\">\n            <label className=\"ml-1 d-block\" style={{ width: '100%' }} htmlFor=\"encryptionKey\">\n              Secret Key\n            </label>\n            <input\n              disabled\n              id=\"encryptionKey\"\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.secretKey}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-outline-primary\"\n                type=\"button\"\n                onClick={() => this.setState({ secretKey: this.getRandomHex(32) })}\n              >\n                <span className=\"fas fa-sync-alt\" />\n              </button>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"ml-1\" htmlFor=\"encryptionText\">\n              Text\n            </label>\n            <input\n              id=\"encryptionText\"\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter text to be encrypted.\"\n              onChange={e => this.setState({ text: e.target.value })}\n            />\n          </div>\n          <button\n            disabled={this.isSubmitDisabled()}\n            type=\"submit\"\n            className=\"btn btn-block btn-outline-primary mt-5\"\n            onClick={this.handleSubmit}\n          >\n            Encrypt\n          </button>\n        </form>\n        {this.state.encryptedText && (\n          <div className=\"card border-primary mt-5 text-center form\">\n            <div className=\"card-body\">\n              <p className=\"card-text\">{this.state.encryptedText}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// Lib\nimport * as React from 'react';\nimport * as crypto from 'crypto';\n\n// App\nimport 'styles/Hash.scss';\n\ninterface HashMap {\n  [hash: string]: string;\n}\n\ninterface HashState {\n  searchTerm: string;\n  hashedMap?: HashMap;\n}\n\n// eslint-disable-next-line\ninterface HashProps {}\n\nexport class Hash extends React.Component<HashProps, HashState> {\n  // Some reason, getHashes() function returns unsupported algos as well\n  private supportedAlgos = ['sha1', 'sha224', 'sha256', 'md5', 'rmd160'];\n  private hashes: string[];\n\n  constructor(props: HashProps) {\n    super(props);\n    this.hashes = crypto\n      .getHashes()\n      .filter(h => this.supportedAlgos.includes(h.toLowerCase()));\n\n    this.state = {\n      searchTerm: '',\n      hashedMap: undefined,\n    };\n  }\n\n  public handleSearch = (e: any): void => {\n    e.preventDefault();\n    const hashedMap = this.state.hashedMap || {};\n\n    this.hashes.forEach(h => {\n      hashedMap[h] = this.getHashedValue(h, this.state.searchTerm);\n    });\n\n    this.setState({ hashedMap });\n  };\n\n  public getHashedValue = (algo: string, text: string): string => {\n    return crypto\n      .createHash(algo)\n      .update(text)\n      .digest('hex');\n  };\n\n  render() {\n    const { searchTerm, hashedMap } = this.state;\n\n    return (\n      <div className=\"hash-container\">\n        <form className=\"form-inline\">\n          <label className=\"sr-only\" htmlFor=\"inlineFormInputGroup\">\n            Example Text\n          </label>\n          <div className=\"input-group mb-2 mr-sm-2 mb-sm-0\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"inlineFormInputGroup\"\n              placeholder=\"Example Text\"\n              value={searchTerm}\n              onChange={e => this.setState({ searchTerm: e.target.value })}\n            />\n          </div>\n          <button\n            disabled={!searchTerm}\n            type=\"submit\"\n            className=\"btn btn-primary btn-shadow\"\n            onClick={this.handleSearch}\n          >\n            <span className=\"fas fa-poll-h mr-2\" />\n            Hash\n          </button>\n        </form>\n        {hashedMap && (\n          <table className=\"table table-hover table-striped\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th>#</th>\n                <th>Hash Algorithm</th>\n                <th>Hashed Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(hashedMap).map((algo, i) => (\n                <tr key={`${searchTerm}-${i}`}>\n                  <th scope=\"row\">{i}</th>\n                  <td>{algo}</td>\n                  <td>{hashedMap[algo]}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n","// Lib\nimport * as React from 'react';\n\nexport class Encode extends React.PureComponent {\n  render() {\n    return <h1>I am Encode</h1>;\n  }\n}\n","// Lib\nimport * as React from 'react';\n\nexport class Decode extends React.PureComponent {\n  render() {\n    return <h1>I am Decode</h1>;\n  }\n}\n","// Lib\nimport * as React from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\n// App\nimport 'styles/Container.scss';\nimport { Decryption, Encryption, Hash, Encode, Decode } from './Components';\n\nexport class Container extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"nav-container\">\n        <Switch>\n          <Route path=\"/hash\" component={Hash} />\n          <Route path=\"/encryption\" component={Encryption} />\n          <Route path=\"/decryption\" component={Decryption} />\n          <Route path=\"/encode\" component={Encode} />\n          <Route path=\"/decode\" component={Decode} />\n          <Route render={() => <Redirect to=\"/hash\" />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n","// Lib\nimport * as React from 'react';\n\n// App\nimport 'styles/App.scss';\nimport { Header } from './Header';\nimport { NavTab } from './NavTab';\nimport { Container } from './Container';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <a href=\"https://github.com/shawnkoon/cryptokoon\">\n          <img\n            className=\"fork-logo\"\n            src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"\n            alt=\"Fork me on GitHub\"\n          />\n        </a>\n        <Header textDelay={200} />\n        <NavTab />\n        <Container />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","// Lib\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\n// App\nimport './styles/bootstrap4-neon-glow.scss';\nimport App from './views/App';\nimport * as serviceWorker from './misc/serviceWorker';\n\nReactDOM.render(\n  // https://github.com/facebook/create-react-app/issues/1765\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.78e7d370.png\";"],"sourceRoot":""}